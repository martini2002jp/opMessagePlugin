<?php

/**
 * This file is part of the OpenPNE package.
 * (c) OpenPNE Project (http://www.openpne.jp/)
 *
 * For the full copyright and license information, please view the LICENSE
 * file and the NOTICE file that were distributed with this source code.
 */

/**
 * PluginSendMessageData
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    opMessagePlugin
 * @subpackage form
 */
abstract class PluginSendMessageData extends BaseSendMessageData
{
  const MESSAGE_TYPE_RECEIVE = 'receive';
  const MESSAGE_TYPE_SEND = 'send';
  const MESSAGE_TYPE_DRAFT = 'draft';
  const MESSAGE_TYPE_DUST = 'dust';

  protected
    $previous = null,
    $next = null;

  /**
   * メッセージが本人送信のものかどうか確認する
   * @param  $member_id
   * @return boolean
   */
  public function getIsSender($memberId = null)
  { 
    if (is_null($memberId))
    {
      $memberId = sfContext::getInstance()->getUser()->getMemberId();
    }
    if ($this->getMemberId() == $memberId)
    {
      return true;
    }
    else
    {
      return false;
    }
  }

  /**
   * メッセージが本人宛かどうか確認する
   * @param  $member_id
   * @return int
   */
  public function getIsReceiver($member_id)
  { 
    $message = Doctrine::getTable('MessageSendList')->getMessageByReferences($member_id, $this->getId());
    if ($message) {
      return 1;
    } else {
      return 0;
    }
  }

  /**
   * 宛先リストを取得する
   * @return array
   */
  public function getSendList()
  {
    $objs = Doctrine::getTable('MessageSendList')->getMessageSendList($this->getId());
    return $objs;
  }

  /**
   * 宛先(1件)を取得する
   * @return Member
   */
  public function getSendTo()
  {
    $objs = $this->getSendList();
    if ($cnt = count($objs) == 0) {
      return null;
    }
    return $objs[0]->getMember();
  }

  /**
   * 添付ファイルを取得する（idの昇順）
   * @return array
   */
  public function getMessageFiles(Doctrine_Query $q = null)
  {
    if (is_null($q))
    {
      $a = Doctrine::getTable('MessageFile')
        ->orderBy('id ASC');
    }
    $files = parent::getMessageFile($q);
    return $files;
  }

  public function getMessageSendLists()
  {
    return Doctrine::getTable('MessageSendList')->findByMessageId($this->getId());
  }

  public function getPrevious($type = self::MESSAGE_TYPE_RECEIVE, $myMemberId = null)
  {
    if (is_null($this->previous))
    {
      switch ($type)
      {
        case self::MESSAGE_TYPE_RECEIVE:
          $this->previous = Doctrine::getTable('MessageSendList')->getPreviousSendMessageData($this, $myMemberId);
          break;
        case self::MESSAGE_TYPE_SEND:
          $this->previous = Doctrine::getTable('SendMessageData')->getPreviousSendMessageData($this, $myMemberId);
          break;
        case self::MESSAGE_TYPE_DUST:
          $this->previous = Doctrine::getTable('DeletedMessage')->getPreviousSendMessageData($this, $myMemberId);
          break;
        default:
          throw new LogicException(sprintf('The specified message type "%" is not supported here.', $type));
      }
    }

    return $this->previous;
  }

  public function getNext($type = self::MESSAGE_TYPE_RECEIVE, $myMemberId = null)
  {
    if (is_null($this->next))
    {
      switch ($type)
      {
        case self::MESSAGE_TYPE_RECEIVE:
          $this->next = Doctrine::getTable('MessageSendList')->getNextSendMessageData($this, $myMemberId);
          break;
        case self::MESSAGE_TYPE_SEND:
          $this->next = Doctrine::getTable('SendMessageData')->getNextSendMessageData($this, $myMemberId);
          break;
        case self::MESSAGE_TYPE_DUST:
          $this->next = Doctrine::getTable('DeletedMessage')->getNextSendMessageData($this, $myMemberId);
          break;
        default:
          throw new LogicException(sprintf('The specified message type "%" is not supported here.', $type));
      }
    }

    return $this->next;
  }
}
